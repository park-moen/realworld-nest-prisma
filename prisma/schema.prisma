generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  passwordHash  String
  bio           String?
  image         String?
  articles      Article[]
  comments      Comment[]
  favorites     Favorite[]
  following     Follow[]       @relation("following")
  followers     Follow[]       @relation("followers")
  refreshTokens RefreshToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String  @id @default(uuid())
  slug        String  @unique
  title       String
  description String?
  body        String
  authorId    String
  author      User    @relation(fields: [authorId], references: [id], onDelete: Cascade)

  tags      ArticleTag[]
  favorites Favorite[]
  comments  Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId, createdAt])
  @@index([createdAt])
}

model Comment {
  id        String  @id @default(uuid())
  body      String
  authorId  String
  articleId String
  author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId, createdAt])
}

model Tag {
  id    String       @id @default(uuid())
  name  String       @unique
  posts ArticleTag[]
}

model ArticleTag {
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
  @@index([tagId])
}

model Favorite {
  userId    String
  articleId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@id([userId, articleId])
  @@index([articleId])
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
}

model RefreshToken {
  id         String    @id @default(uuid())
  userId     String
  tokenHash  String    @unique
  userAgent  String?
  ip         String?
  expiresAt  DateTime
  revokedAt  DateTime?
  replacedBy String?
  createdAt  DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}
